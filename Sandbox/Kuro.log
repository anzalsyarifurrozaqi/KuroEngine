[14:30:40] [info] KURO: Creating Window Kuro Engine (1280, 720)
[14:30:40] [info] KURO: OpenGL Info:
[14:30:40] [info] KURO:   Vendor: NVIDIA Corporation
[14:30:40] [info] KURO:   Renderer: NVIDIA GeForce RTX 3060/PCIe/SSE2
[14:30:40] [info] KURO:   Version: 4.6.0 NVIDIA 537.42
[14:30:40] [info] KURO: Renderer::Init
[14:30:40] [info] KURO: OpenGLRendererAPI::Init
[14:30:40] [trace] KURO: Model::LoadModel
[14:30:40] [trace] KURO: assets/objects/Cube_2x2x2m.glb
[14:30:40] [trace] KURO: Model::ProcessNode
[14:30:40] [trace] KURO: Model::ProcessMesh
[14:30:40] [trace] KURO: 96
[14:30:40] [info] KURO: 132
[14:30:40] [trace] KURO: 0, 1, 2, 0, 2, 3
[14:30:40] [trace] KURO: 4, 5, 6, 4, 6, 7
[14:30:40] [trace] KURO: 8, 9, 10, 8, 10, 11
[14:30:40] [trace] KURO: 12, 13, 14, 12, 14, 15
[14:30:40] [trace] KURO: 16, 17, 18, 16, 18, 19
[14:30:40] [trace] KURO: 20, 21, 22, 23, 24, 25
[14:30:40] [trace] KURO: 26, 27, 28, 29, 30, 31
[14:30:40] [trace] KURO: 32, 33, 34, 35, 36, 37
[14:30:40] [trace] KURO: 38, 39, 40, 41, 42, 43
[14:30:40] [trace] KURO: 44, 45, 46, 44, 46, 47
[14:30:40] [trace] KURO: 48, 49, 50, 48, 50, 51
[14:30:40] [trace] KURO: 52, 53, 54, 52, 54, 55
[14:30:40] [trace] KURO: 56, 57, 58, 56, 58, 59
[14:30:40] [trace] KURO: 60, 61, 62, 60, 62, 63
[14:30:40] [trace] KURO: 64, 65, 66, 64, 66, 67
[14:30:40] [trace] KURO: 68, 69, 70, 68, 70, 71
[14:30:40] [trace] KURO: 72, 73, 74, 72, 74, 75
[14:30:40] [trace] KURO: 76, 77, 78, 76, 78, 79
[14:30:40] [trace] KURO: 80, 81, 82, 80, 82, 83
[14:30:40] [trace] KURO: 84, 85, 86, 84, 86, 87
[14:30:40] [trace] KURO: 88, 89, 90, 88, 90, 91
[14:30:40] [trace] KURO: 92, 93, 94, 92, 94, 95
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, 0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, 1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, 1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, 0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, 1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, 1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, -1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(-1.000000, 0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, 1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -1.000000, -0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, -0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, -0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, 0.951532, -1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(-1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(0.951532, 0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(0.951532, -0.951532, 1.000000)
[14:30:40] [trace] KURO: vec3(1.000000, -0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(1.000000, 0.951532, 0.951532)
[14:30:40] [trace] KURO: vec3(-0.951532, 0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(-0.951532, -0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(-1.000000, -0.951532, -0.951532)
[14:30:41] [trace] KURO: vec3(-1.000000, 0.951532, -0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, 1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, 1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, 0.951532, 1.000000)
[14:30:41] [trace] KURO: vec3(0.951532, 0.951532, 1.000000)
[14:30:41] [trace] KURO: vec3(0.951532, 1.000000, -0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, 1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(1.000000, 0.951532, 0.951532)
[14:30:41] [trace] KURO: vec3(1.000000, 0.951532, -0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, -1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, -1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, -0.951532, 1.000000)
[14:30:41] [trace] KURO: vec3(-0.951532, -0.951532, 1.000000)
[14:30:41] [trace] KURO: vec3(-0.951532, 1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, 1.000000, -0.951532)
[14:30:41] [trace] KURO: vec3(-1.000000, 0.951532, -0.951532)
[14:30:41] [trace] KURO: vec3(-1.000000, 0.951532, 0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, 1.000000, -0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, 1.000000, -0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, 0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(-0.951532, 0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(0.951532, -1.000000, 0.951532)
[14:30:41] [trace] KURO: vec3(0.951532, -1.000000, -0.951532)
[14:30:41] [trace] KURO: vec3(1.000000, -0.951532, -0.951532)
[14:30:41] [trace] KURO: vec3(1.000000, -0.951532, 0.951532)
[14:30:41] [trace] KURO: vec3(-0.951532, -0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(-0.951532, 0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(0.951532, 0.951532, -1.000000)
[14:30:41] [trace] KURO: vec3(0.951532, -0.951532, -1.000000)
[14:30:41] [info] KURO: OpenGLShader::OpenGLShader m_FilePath : assets/shaders/Renderer2D_Quad.glsl
[14:30:41] [info] KURO: OpenGLShader::ReadFile
[14:30:41] [info] KURO: OpenGLShader::PreProcess
[14:30:41] [info] KURO: OpenGLShader::CompileOrGetOnpenGLBinaries
[14:30:41] [trace] KURO: 35633
[14:30:41] [trace] KURO: #version 460 core

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in vec2 a_TexCoord;
layout(location = 3) in float a_TexIndex;
layout(location = 4) in float a_TilingFactor;
layout(location = 5) in int a_EntityID;

layout(std140, binding = 0) uniform Camera
{
	mat4 u_ViewProjection;
};

struct VertexOutput
{
	vec4 Color;
	vec2 TexCoord;
	float TilingFactor;
};

layout (location = 0) out VertexOutput Output;
layout (location = 3) out flat float v_TexIndex;
layout (location = 4) out flat int v_EntityID;

void main()
{
	Output.Color = a_Color;
	Output.TexCoord = a_TexCoord;
	Output.TilingFactor = a_TilingFactor;
	v_TexIndex = a_TexIndex;
	v_EntityID = a_EntityID;

	gl_Position = vec4(a_Position, 1.0);

	//gl_Position = u_ViewProjection * vec4(a_Position, 1.0);
}


[14:30:41] [trace] KURO: 35632
[14:30:41] [trace] KURO: #version 460 core

layout(location = 0) out vec4 o_Color;
layout(location = 1) out int o_EntityID;

struct VertexOutput
{
	vec4 Color;
	vec2 TexCoord;
	float TilingFactor;
};

layout (location = 0) in VertexOutput Input;
layout (location = 3) in flat float v_TexIndex;
layout (location = 4) in flat int v_EntityID;

layout (binding = 0) uniform sampler2D u_Textures[32];

void main()
{
	vec4 texColor = Input.Color;

	switch(int(v_TexIndex))
	{
		case  0: texColor *= texture(u_Textures[ 0], Input.TexCoord * Input.TilingFactor); break;
		case  1: texColor *= texture(u_Textures[ 1], Input.TexCoord * Input.TilingFactor); break;
		case  2: texColor *= texture(u_Textures[ 2], Input.TexCoord * Input.TilingFactor); break;
		case  3: texColor *= texture(u_Textures[ 3], Input.TexCoord * Input.TilingFactor); break;
		case  4: texColor *= texture(u_Textures[ 4], Input.TexCoord * Input.TilingFactor); break;
		case  5: texColor *= texture(u_Textures[ 5], Input.TexCoord * Input.TilingFactor); break;
		case  6: texColor *= texture(u_Textures[ 6], Input.TexCoord * Input.TilingFactor); break;
		case  7: texColor *= texture(u_Textures[ 7], Input.TexCoord * Input.TilingFactor); break;
		case  8: texColor *= texture(u_Textures[ 8], Input.TexCoord * Input.TilingFactor); break;
		case  9: texColor *= texture(u_Textures[ 9], Input.TexCoord * Input.TilingFactor); break;
		case 10: texColor *= texture(u_Textures[10], Input.TexCoord * Input.TilingFactor); break;
		case 11: texColor *= texture(u_Textures[11], Input.TexCoord * Input.TilingFactor); break;
		case 12: texColor *= texture(u_Textures[12], Input.TexCoord * Input.TilingFactor); break;
		case 13: texColor *= texture(u_Textures[13], Input.TexCoord * Input.TilingFactor); break;
		case 14: texColor *= texture(u_Textures[14], Input.TexCoord * Input.TilingFactor); break;
		case 15: texColor *= texture(u_Textures[15], Input.TexCoord * Input.TilingFactor); break;
		case 16: texColor *= texture(u_Textures[16], Input.TexCoord * Input.TilingFactor); break;
		case 17: texColor *= texture(u_Textures[17], Input.TexCoord * Input.TilingFactor); break;
		case 18: texColor *= texture(u_Textures[18], Input.TexCoord * Input.TilingFactor); break;
		case 19: texColor *= texture(u_Textures[19], Input.TexCoord * Input.TilingFactor); break;
		case 20: texColor *= texture(u_Textures[20], Input.TexCoord * Input.TilingFactor); break;
		case 21: texColor *= texture(u_Textures[21], Input.TexCoord * Input.TilingFactor); break;
		case 22: texColor *= texture(u_Textures[22], Input.TexCoord * Input.TilingFactor); break;
		case 23: texColor *= texture(u_Textures[23], Input.TexCoord * Input.TilingFactor); break;
		case 24: texColor *= texture(u_Textures[24], Input.TexCoord * Input.TilingFactor); break;
		case 25: texColor *= texture(u_Textures[25], Input.TexCoord * Input.TilingFactor); break;
		case 26: texColor *= texture(u_Textures[26], Input.TexCoord * Input.TilingFactor); break;
		case 27: texColor *= texture(u_Textures[27], Input.TexCoord * Input.TilingFactor); break;
		case 28: texColor *= texture(u_Textures[28], Input.TexCoord * Input.TilingFactor); break;
		case 29: texColor *= texture(u_Textures[29], Input.TexCoord * Input.TilingFactor); break;
		case 30: texColor *= texture(u_Textures[30], Input.TexCoord * Input.TilingFactor); break;
		case 31: texColor *= texture(u_Textures[31], Input.TexCoord * Input.TilingFactor); break;
	}

	if (texColor.a == 0.0)
		discard;

	o_Color = texColor;
	o_EntityID = v_EntityID;
}

[14:30:41] [info] KURO: OpenGLShader::CreateProgram
[14:30:41] [warning] KURO: Shader creation took 4.547901 ms
[14:30:41] [info] KURO: OpenGLShader::OpenGLShader name : Renderer2D_Quad
[14:30:41] [info] KURO: OpenGLShader::OpenGLShader m_FilePath : assets/shaders/Box.glsl
[14:30:41] [info] KURO: OpenGLShader::ReadFile
[14:30:41] [info] KURO: OpenGLShader::PreProcess
[14:30:41] [info] KURO: OpenGLShader::CompileOrGetOnpenGLBinaries
[14:30:41] [trace] KURO: 35633
[14:30:41] [trace] KURO: #version 460 core

layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in int a_EntityID;

struct VertexOutput
{
	vec4 Color;
};

layout (location = 0) out VertexOutput Output;
layout (location = 1) out flat int v_EntityID;

void main()
{
	Output.Color = vec4(a_Position, 1.0);
	v_EntityID = a_EntityID;

	gl_Position = vec4(a_Position, 1.0);	
}


[14:30:41] [trace] KURO: 35632
[14:30:41] [trace] KURO: #version 460 core

layout(location = 0) out vec4 o_Color;
layout(location = 1) out int o_EntityID;

struct VertexOutput
{
	vec4 Color;
};

layout (location = 0) in VertexOutput Input;
layout (location = 1) in flat int v_EntityID;

void main()
{
	vec4 texColor = Input.Color;

	o_Color = texColor;
	o_EntityID = v_EntityID;
}

[14:30:41] [info] KURO: OpenGLShader::CreateProgram
[14:30:41] [warning] KURO: Shader creation took 1.3532002 ms
[14:30:41] [info] KURO: OpenGLShader::OpenGLShader name : Box
